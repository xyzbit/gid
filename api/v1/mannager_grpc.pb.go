// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: mannager.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MannagerClient is the client API for Mannager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MannagerClient interface {
	Moudles(ctx context.Context, in *MoudlesReq, opts ...grpc.CallOption) (*MoudlesReply, error)
	RegisterModules(ctx context.Context, in *RegisterModulesReq, opts ...grpc.CallOption) (*RegisterModulesReply, error)
}

type mannagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMannagerClient(cc grpc.ClientConnInterface) MannagerClient {
	return &mannagerClient{cc}
}

func (c *mannagerClient) Moudles(ctx context.Context, in *MoudlesReq, opts ...grpc.CallOption) (*MoudlesReply, error) {
	out := new(MoudlesReply)
	err := c.cc.Invoke(ctx, "/gid.api.v1.Mannager/Moudles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mannagerClient) RegisterModules(ctx context.Context, in *RegisterModulesReq, opts ...grpc.CallOption) (*RegisterModulesReply, error) {
	out := new(RegisterModulesReply)
	err := c.cc.Invoke(ctx, "/gid.api.v1.Mannager/RegisterModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MannagerServer is the server API for Mannager service.
// All implementations must embed UnimplementedMannagerServer
// for forward compatibility
type MannagerServer interface {
	Moudles(context.Context, *MoudlesReq) (*MoudlesReply, error)
	RegisterModules(context.Context, *RegisterModulesReq) (*RegisterModulesReply, error)
	mustEmbedUnimplementedMannagerServer()
}

// UnimplementedMannagerServer must be embedded to have forward compatible implementations.
type UnimplementedMannagerServer struct {
}

func (UnimplementedMannagerServer) Moudles(context.Context, *MoudlesReq) (*MoudlesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Moudles not implemented")
}
func (UnimplementedMannagerServer) RegisterModules(context.Context, *RegisterModulesReq) (*RegisterModulesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterModules not implemented")
}
func (UnimplementedMannagerServer) mustEmbedUnimplementedMannagerServer() {}

// UnsafeMannagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MannagerServer will
// result in compilation errors.
type UnsafeMannagerServer interface {
	mustEmbedUnimplementedMannagerServer()
}

func RegisterMannagerServer(s grpc.ServiceRegistrar, srv MannagerServer) {
	s.RegisterService(&Mannager_ServiceDesc, srv)
}

func _Mannager_Moudles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoudlesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MannagerServer).Moudles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gid.api.v1.Mannager/Moudles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MannagerServer).Moudles(ctx, req.(*MoudlesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mannager_RegisterModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterModulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MannagerServer).RegisterModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gid.api.v1.Mannager/RegisterModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MannagerServer).RegisterModules(ctx, req.(*RegisterModulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Mannager_ServiceDesc is the grpc.ServiceDesc for Mannager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mannager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gid.api.v1.Mannager",
	HandlerType: (*MannagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Moudles",
			Handler:    _Mannager_Moudles_Handler,
		},
		{
			MethodName: "RegisterModules",
			Handler:    _Mannager_RegisterModules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mannager.proto",
}
